# -*- mode: shell-script -*-
#!/bin/sh

# Help message
function help() {
    printf "Usage: octopus  [OPTIONS]\n"
    printf "Usage: octopus  [OPTIONS] [info_port] [pub_port] [sub_port]\n"
    printf "Run a distributed test (Mesenger) of OpenDDS\n"
    printf ""
    printf "Options:\n"
    printf "\t-h,  --help\t\tShow this message\n"
    printf "\t-b,  --bootstrap\tBootstrap the whole platform (build Docker Linux container and Vagrant box from scratch)\n"
    printf "\t-d,  --destroy\t\tdestroy the platform and remove Docker Linux container and Vagrant box\n"
    printf "\t-r,  --run\t\tRun the tests\n"
    printf "\t-s,  --start\t\tStart the platform (if the platform is built)\n"
    printf "\t-t,  --terminate\tTerminate the platform\n"
    printf ""
    printf "Example:\n"
    printf "\toctopus --start 10000 1234 1234\t Start the platform (info_port=10000, pub_port=1234, sub_port=1234)\n"
    printf "\toctopus --start\t Start the platform with default ports\n"
    printf "\toctopus --run \t Run the test (after start the platform)\n" 
   printf "\toctopus -h\n"
}

# auxilary function
print_success() {
    printf "\t done\n"
}

error() {
    echo "$@" 1>&2
}

fail() {
    error "$@" && exit 1
}

function rotate
{
    # usage:
    #   rotate &
    #   ROTATE_PID=$!
    #   your_task
    #   kill -9 $ROTATE_PID
    #  echo "\b\b  "
    INTERVAL=1
    RCOUNT="0"
    # Sleep time between rotation intervals
    while :
    do
	(( RCOUNT = RCOUNT + 1 ))
	# Increment the RCOUNT
	case $RCOUNT in
	    1) echo ’-’"\b\c"
		sleep $INTERVAL
		;;
	    2) echo ’\\’"\b\c"
		sleep $INTERVAL
		;;
	    3) echo "|\b\c"
		sleep $INTERVAL
		;;
	    4) echo "/\b\c"
		sleep $INTERVAL
		;;
	    *)
		RCOUNT="0"
		;;
	esac
    done
} # End of Function - rotate


# major functions
function bootstrap() {
    ./check
    # rebuild OpenDDS docker container
    printf "build Docker image..."
    sudo docker rmi docker_opendds 
    sudo docker build --force-rm=true --no-cache=true -t docker_opendds docker-opendds/Dockerfile
    print_success

    printf "build Vagrant box..."
    sudo vagrant box remove --force dds
    cd vagrant-opendds && ./build.sh
    cd ..
    print_success

    # Let linux kernel forward the packet
    printf "enable Linux kernel forwarding packets..."
    forward=$(cat /proc/sys/net/ipv4/ip_forward)
    if [ $forward -eq 1 ]; then
	echo "echo 1 > /proc/sys/net/ipv4/ip_forward" | sudo sh
	print_success
    else
	fail "cannot let Linux kernel forwarding packets..."
    fi

    printf "check virtualbox bridge..."
    vboxnet=$(ip addr show vboxnet0 > /dev/null)
    if ! [ "$vboxnet" == "" ] ; then
	vboxmanage hostonlyif create
    fi
    print_success
}

function destroy() {
#    terminate
    printf "clean Docker image...:"
    sudo docker rmi docker_opendds 
    print_success
    printf "clean Vagrant box...:"
    vm_id=$(sudo vagrant global-status | grep ' opendds ' | gawk '{print $1}')
    if  [ -n "$vm_id" ]; then 
	sudo vagrant destroy -f $vm_id
    fi
    sudo vagrant box remove -f dds
    print_success
}

function run() {

    printf "run inforepo..."
    sudo vagrant up --no-provision
    # if [ $# -ne 0 ]; then
    # 	sed -i 's/dds_build_win/$2/g' install_opendds_autobuild.bat
    # 	vagrant ssh -c "c:\vagrant\install_opendss_autobuild.bat"
    # else
    # 	 vagrant ssh -c "c:\vagrant\install_opendss_configure.bat"
    # fi
    print_success
    
    printf "run publisher..."
    sudo docker start pub
   if [ $# -ne 0 ]; then
	sudo docker exec -d pub \
	    /scripts/publisher_autobuild.sh $1
    else
	sudo docker exec -d pub \
	    /scripts/publisher.sh
   fi
    print_success
    
    printf  "run subscriber..."
    sudo docker start sub
   if [ $# -ne 0 ]; then
	sudo docker exec -d sub \
	    /scripts/subscriber_autobuild.sh $1
    else
	sudo docker exec -d sub \
	    /scripts/subscriber.sh
   fi
    print_success
}

function terminate() {
    printf "terminate Virtualbox VM..."
    cd vagrant-opendds && vagrant halt
    cd ..
    print_success
    printf "terminate Docker container..."
    sudo docker stop pub sub;
    print_success
}

function load() {
    repo_port=$1
    pub_port=$2
    sub_port=$3
    printf "check port of inforepo...\t%u\n" "$repo_port"
    printf "check port of publisher...\t%u\n" "$pub_port"
    printf "check port of subscriber...\t%u\n" "$sub_port"

    printf "load inforepo...:"
    vm_name=repo_vm
    sed -e "s/repo_port/$repo_port/g" \
	-e "s/vm_name/$vm_name/g" \
	Vagrant_template > Vagrantfile
    sudo vagrant up
    print_success

    printf "check ip of inforepo...:"
    vnet=$(vboxmanage showvminfo repo_vm | grep "NIC.*Host-only" | gawk '{print $8}' | sed -e "s/'//g" -e "s/,//g")
    if [ -z "$vnet" ]; then
	fail "no virtualbox network..."
    fi
    repo_gateway=$(ip addr show $vnet | grep -w inet | gawk '{print $2}' | sed 's/\/24//')
    if [ -z "$repo_gateway" ]; then
	fail "no virtulbox vm..."
    fi 
    repo_ip=$(echo $repo_gateway | gawk -F. '{print $1"."$2"."$3"."$4+1}')
    # sed -e "s/repo_port/$repo_port/g" \
    # 	-e "s/repo_ip/$repo_ip/g" \
    # 	-e "s/repo_gateway/$repo_gateway/g" \
    # 	./scripts/run_dds_win_template.bat > ./scripts/run_dds_win.bat ;
    printf "\t%s\n" "$repo_ip"

    
    printf "load publisher..."
    sudo docker run \
    	-d --name pub -v "$PWD/scripts:/scripts" -w /scripts --env "repo_port=$repo_port" \
    	--env "repo_ip=$repo_ip"  --env "host_port=$host_port" \
    	-p $repo_port \
    	opendds_update \
    	/bin/bash
    print_success
    
    printf  "load subscriber..."
    sudo docker run \
    	-d --name sub -v "$PWD/scripts:/scripts" -w /scripts --env "repo_port=$repo_port" \
    	--env "repo_ip=$repo_ip" --env "host_port=$host_port" \
    	-p $repo_port \
    	opendds_update \
    	/bin/bash
    print_success
}

function clean() {
    printf "clean Virutalbox VM..."
    cd vagrant-opendds && sudo vagrant destroy -f
    cd ..
    print_success
    printf "clean Docker container..."
    sudo docker rm -f pub sub;
    print_success
}


# main function is simple  just switch to different action
# Reset in case getopts has been used previously in the shell.
OPTIND=1
OPTIONS=$(getopt -o hbdrlct -l bootstrap,destroy,load,clean,run,terminate -- "$@")
[ $? != 0 ] && exit 1

eval set -- "$OPTIONS"

 echo "$OPTIONS"
# Print help message if no parameters
[ $# -eq 1 ] && help

is_start=0
# TODO: port detection algorithm 
unset ports
ports[0]=10000   # default info_port
ports[1]=1234     # default pub_port
ports[2]=1234     # default sub_port
while [ $# -gt 0 ]
do
    case "$1" in
     	-h | --help )
	    help;
	    exit ;;
     	-b | --bootstrap )
	    printf "bootstrap may take hours depending on your network connection...\n"
	    shift 2;
	    linux_cfg_xml=" "
	    win_cfg_xml=" "
	    if [ $# -ne 0 ] ; then
		linux_cfg_xml=$1
		win_cfg_xml=$2
	    fi 
	    bootstrap $linux_cfg_xml $win_cfg_xml
	    break ;;
     	-d | --destroy )
	    printf "destroy the platform...\n"
	    destroy;
	    break ;;
     	-r | --run )
	    printf "run test...\n";
	    shift 2;
	    linux_cfg_xml=" "
	    win_cfg_xml=" "
	    if [ $# -ne 0 ] ; then
		linux_cfg_xml=$1
		win_cfg_xml=$2
	    fi 
	    run $linux_cfg_xml $win_cfg_xml
	    break ;;
     	-l | --load )
	    printf "load the platform...\n";
	    shift 2;
	    for i in {0..2} 
	    do
		if [ $# -eq 0 ] ; then break; fi
		if ! [[ $1 =~ ^[0-9]+$ ]] ; then
		    fail "need a number as info_port"
		else
		    ports[$i]=$1;
		    shift
		fi	  
	    done;
	    # echo ${ports[@]};
	    load ${ports[@]};
	    break ;;
     	-c | --clean )
	    printf "clean the platform...\n"
	    clean;
	    break ;;
     	-t | --terminate )
	    printf "terminate the test...\n";
	    terminate;
	    break ;;
	-- ) shift ;;
	*)  fail "Internal error!";
	    break;;
    esac
done
