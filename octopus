# -*- mode: shell-script -*-
#!/bin/sh

# Help message
function help() {
    printf "Usage: octopus  [OPTIONS]\n"
    printf "Usage: octopus  [OPTIONS] [info_port] [pub_port] [sub_port]\n"
    printf "Run a distributed test (Mesenger) of OpenDDS\n"
    printf ""
    printf "Options:\n"
    printf "\t-h,  --help\t\tShow this message\n"
    printf "\t-b,  --bootstrap\tBootstrap the whole platform (build Docker Linux container and Vagrant box from scratch)\n"
    printf "\t-c,  --clean\t\tClean up the platform and remove Docker Linux container and Vagrant box\n"
    printf "\t-r,  --run\t\tRun the tests\n"
    printf "\t-s,  --start\t\tStart the platform\n"
    printf "\t-t,  --terminate\tTerminate the platform\n"
    printf ""
    printf "Example:\n"
    printf "\toctopus --start 10000 1234 1234\t Start the platform (info_port=10000, pub_port=1234, sub_port=1234)\n"
    printf "\toctopus --start\t Start the platform with default ports\n"
    printf "\toctopus --run \t Run the test (after start the platform)\n"
    printf "\toctopus -h\n"
}

function bootstrap() {
    echo "in bootstrap"
}

function clean() {
    echo "in clean"
}

function run() {
    echo "in run"
}

function start() {
    echo "in start"
}

function terminate() {
    echo "in terminate"
}

# Reset in case getopts has been used previously in the shell.
OPTIND=1
OPTIONS=$(getopt -o hbcrs::t -l boostrap,clean,run,start::,terminate -- "$@")
[ $? != 0 ] && exit 1

eval set -- "$OPTIONS"

echo "$OPTIONS"
# Print help message if no parameters
[ $# -eq 1 ] && help

is_start=0
unset ports
ports[0]=10000   # default info_port
ports[1]=1234     # default pub_port
ports[2]=1234     # default sub_port
while [ $# -gt 0 ]
do
    case "$1" in
     	-h | --help )
	    help;
	    exit ;;
     	-b | --bootstrap )
	    printf "boostrap whole platform (hours long), are you sure? [N/y]"
	    bootstrap;
	    break ;;
     	-c | --clean )
	    printf "clean up wholel platform..."
	    clean;
	    break ;;
     	-r | --run )
	    printf "run test...";
	    run;
	    break ;;
     	-s | --start )
	    is_start=1
	    printf "start the platform..."
	    case "$2" in
		' ') echo "default value..."; shift 2;;
		*) ports=$2; shift 2;;
	     esac;
	    shift ;;
     	-t | --terminate )
	    printf "terminate the platform";
	    terminate;
	    break ;;
	-- ) shift ;;
	*) 
	    [ $is_start -ne 1 ] && echo "Internal error!" && exit 1;
	    i=0
	    while [ $# -gt 0 ]; do
		if ! [[ $1 =~ ^[0-9]+$ ]] ; then
		    echo "need a number as info_port"; exit 1
		else
		    ports[$i]=$1
		    let i++
		    shift
		fi	  
	    done;
	    echo ${ports[@]};
	    start ${ports[@]};
	    break;;
    esac
done
